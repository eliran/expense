---
swagger: '2.0'
info:
  version: 0.9.0
  title: Simple Expense Tracker API
host: 'localhost:8081'
paths:
  /users:
    post:
      description: Create a new user
      operationId: newUser
      parameters:
      - name: body
        in: body
        schema:
          $ref: '#/definitions/newUser'
      responses:
        '201':
          description: user created
          schema:
            $ref: '#/definitions/user'
        '400':
          description: user creation failure
          schema:
            $ref: '#/definitions/errors'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    get:
      description: Returns all users
      operationId: findUsers
      parameters:
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
        - name: offset
          in: query
          description: offset of users
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: user response
          schema:
            type: object
            properties:
              users:
                type: array
                items:
                  $ref: '#/definitions/user'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
  /users/{id}:
    get:
      description: Return a user
      operationId: getUser
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: integer
      responses:
        '200':
          description: user info
          schema:
            $ref: '#/definitions/user'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    put:
      description: Update a user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: integer
      responses:
        '200':
          description: user updated
          schema:
            $ref: '#/definitions/user'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      description: Delete a user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: integer
      responses:
        '204':
          description: user deleted
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
  /users/{userId}/expenses:
    post:
      description: Create a new expense
      operationId: newUserExpense
      parameters:
        - name: userId
          in: path
          description: User ID to create expense for
          required: true
          type: integer
          format: int32
        - name: body
          in: body
          schema:
            $ref: '#/definitions/newExpense'
      responses:
        '201':
          description: expense created
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
            
    get:
      description: Get all expenses of a user
      operationId: getUserExpenses
      parameters:
        - name: userId
          in: path
          description: User ID to fetch expenses
          required: true
          type: integer
          format: int32
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
        - name: offset
          in: query
          description: offset of users
          required: false
          type: integer
          format: int32
        - name: filter
          in: query
          description: text filtering of expenses (matched against comment & description)
          required: false
          type: string
        - name: startDate
          in: query
          description: filter expenses returning only expenses starting at this date
          required: false
          type: integer
          format: int32
        - name: endDate
          in: query
          description: filter expenses returning expenses up to endDate
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: User Expenses
          schema:
            type: object
            properties:
              expenses:
                type: array
                items:
                  $ref: '#/definitions/expense'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /users/{userId}/expenses/{id}:
    get:
      description: Fetch an expense of a user
      operationId: getUserExpense
      parameters:
        - name: userId
          in: path
          description: User ID to fetch expense
          required: true
          type: integer
          format: int32
        - name: id
          in: path
          description: Expense ID
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Expense
          schema:
            $ref: '#/definitions/expense'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    put:
      description: Update an expense
      operationId: updateUserExpense
      parameters:
        - name: userId
          in: path
          description: User ID to update expense
          required: true
          type: integer
          format: int32
        - name: id
          in: path
          description: Expense ID
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: expense updated
          schema:
            $ref: '#/definitions/expense'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
      
    delete:
      description: Delete an expense
      operationId: deleteUserExpense
      parameters:
        - name: userId
          in: path
          description: User ID to delete expense
          required: true
          type: integer
          format: int32
        - name: id
          in: path
          description: Expense ID
          required: true
          type: integer
          format: int32
      responses:
        '204':
          description: expense deleted
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
      
definitions:
  newUser:
    type: object
    required:
      - loginName
      - firstName
      - lastName
      - password
    properties:
      loginName:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
  user:
    type: object
    properties:
      id:
        type: integer
        format: int32
      loginName:
        type: string
      firstName:
        type: string
      lastName:
        type: string
   
  newExpense:
    type: object
    required:
      - dateTime
      - amount
      - description
      - comment
    properties:
      dateTime:
        type: integer
        format: int32
      amount:
        type: integer
        format: int32
      description:
        type: string
      comment:
        type: string
        
  expense:
    type: object
    properties:
      id: 
        type: integer
        format: int32
      dateTime:
        type: integer
        format: int32
      amount:
        type: integer
        format: int32
      description:
        type: string
      comment:
        type: string
    
  errors:
    type: object
    required:
      - code
      - errors
    properties:
      code:
        type: string
      errors:
        type: object
        
  errorModel:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: string
      message:
        type: string
